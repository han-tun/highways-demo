# oakland interchange:
# 37.80975004772091,-122.27886199951173,14

camera:
    type: isometric
    axis: [0, .1]

lights:
    light1:
        type: directional
        direction: [1, 1, -.9]
        diffuse: .5
        ambient: .85

sources:
    osm:
        type: GeoJSONTileSource
        url:  http://vector.mapzen.com/osm/all/{z}/{x}/{y}.json

layers:
    earth:
        data: { source: osm, layer: earth }
        style:
            order: 0
            color: [.4, .4, .4]

    landuse:
        data: { source: osm, layer: landuse }
        parks:
            filter: { kind: park }
            style:
                order: 1
                color: [[10, [0.3, 0.4, 0.3]], [14, [0.5, 0.825, 0.5]]]
        playgrounds:
            filter: { kind: [pitch, playground] }
            style:
                order: 2
                color: [0.3, 0.675, 0.3]
        cemeteries:
            filter: { kind: cemetery }
            style:
                order: 1
                color: [0.3, 0.4, 0.3]

    water:
        data: { source: osm, layer: water }
        style:
            order: 3
            color: [0.83, 0.83, 0.83]

        outline-style:
            filter: function () { return (feature.kind != 'ocean' && feature.kind != 'riverbank') && zoom >= 14; }
            style:
                outline:
                    color: [.6, .6, .6]
                    width: function() {return (2.5 * Math.log(zoom));}

    roads:
        data: { source: osm, layer: roads }
        style:
            order: 4
            color: [0.83, 0.83, 0.83]
            width: function () { return Math.log(zoom); }
            outline:
                color: [0, 0, 0]
                width: function () { return (zoom >= 16 && (2/8 * Math.log(zoom))); }

        highway:
            filter: { kind: highway }
            style:
                # put highways on top of all other roads
                order: 10
                color: [1.0, .8, .0]
                width: [[10, 2px], [13, 3px], [15, 4px], [16, 8px], [18, 20px]]
                outline:
                    width: [[9, .25px], [15, 1px], [19, 2px]]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                style:
                    color: [0.65882, 0.65882, 0.50196]
                    width: [[13, 0px], [14, 3px], [16, 5px], [18, 10px]]
                    outline:
                        color: [.3, .3, .3]
                        width: [[13, 0px], [14, .5px], [18, 1.5px]]
                tunnel-link:
                    filter: {is_tunnel: yes, $zoom: {min: 14} }
                    style:
                        color: [0.8, 0.8, 0.7]
                        outline:
                            color: [.5, .5, .5]
            tunnel:
                filter: {is_tunnel: yes, $zoom: {min: 14} }
                style:
                    color: [0.8, 0.8, 0.7]
                    outline:
                        color: [.5, .5, .5]
        major_road:
            filter: { kind: major_road }
            style:
                color: [[13, [0.8, 0.8, 0.8]], [17, [1, 1, 1]]]
                width: [[9, 0px], [14, 1.5px], [15, 2.5px], [16, 4px], [17, 7px], [18, 15px]]
                outline:
                    width: [[10, 0px], [16, 1px]]

        minor_road:
            filter: { kind: minor_road }
            style:
                color: [[15, [0.6, 0.6, 0.6]], [17, [0.8, 0.8, 0.8]]]
                width: [[10, 0px], [12, .25px], [13, .5px], [15, 3px], [17, 5px]]
                outline:
                    width: [[13, 0px], [18, 1px]]
        path:
            filter: { kind: path }
            style:
                color: [0.8, 0.8, 0.8]
                width: [[15, 0px], [16, 2px], [17, 3px], [18, 5px]]
                outline:
                    color: '#666'

        # separate roads slightly in z based on their sort-order past zoom 14
        z-order:
            filter: { $zoom: {min: 14} }
            style:
                order: |
                    function () {
                        function reduceSortKey(key) {
                            return 30 * Math.floor((key % 10000) / 1000) +
                                   10 * Math.floor((key % 1000) / 100) +
                                   1  * (key % 10);
                        }
                        var min = reduceSortKey(-3109);
                        var order = 10 + reduceSortKey(feature.sort_key) - min;
                        return order;
                    }

    buildings:
        data: { source: osm, layer: buildings }
        style:
            order: 11
            color: [.3, .3, .3]
            extrude: function () { return ( zoom >= 16) || (zoom >= 15 && feature.height > 20) }

    road_labels:
        data: { source: osm, layer: roads }

        # filter: { name: true, $zoom: { min: 13 } }
        # filter: { name: true }
        style:
            name: text
            order: 12
            interactive: true
            font:
                typeface: 12px Helvetica
                fill: white
                stroke: black

        # highways:
        #     filter: { kind: highway, $zoom: { min: 13 } }
        major_road:
            filter: { kind: major_road, $zoom: { min: 13 } }
            style:
                size: 12px
        minor_road:
            filter: { kind: minor_road, railway: false, $zoom: { min: 14 } }
            style:
                font:
                    typeface: 11px Helvetica
                    # fill: [0.8, 0.7, 0.7]
                    # stroke: [.31, .33, .31]
                    fill: blue
                    stroke: [.31, .33, .31]